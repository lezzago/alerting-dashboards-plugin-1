name: E2E Cypress tests
on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - "**"
env:
  OPENSEARCH_DASHBOARDS_VERSION: '2.x'
  ALERTING_PLUGIN_BRANCH: '2.x'
jobs:
  tests:
    name: Run Cypress E2E tests
    runs-on: ubuntu-latest
    env:
      # prevents extra Cypress installation progress messages
      CI: 1
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          # TODO: Parse this from alerting plugin
          java-version: 11
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: alerting
          repository: opensearch-project/alerting
          ref: ${{ env.ALERTING_PLUGIN_BRANCH }}
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '7.6.1'
      - name: Run Opensearch with plugin
        run: |
          cd alerting
          ./gradlew run &
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:9200)" != "200" ]]; do sleep 5; done'
      - name: Checkout OpenSearch Dashboards
        uses: actions/checkout@v2
        with:
          repository: opensearch-project/OpenSearch-Dashboards
          ref: ${{ env.OPENSEARCH_DASHBOARDS_VERSION }}
          path: OpenSearch-Dashboards
      - name: Checkout Alerting OpenSearch Dashboards plugin
        uses: actions/checkout@v2
        with:
          path: OpenSearch-Dashboards/plugins/alerting-dashboards-plugin
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: './OpenSearch-Dashboards/.nvmrc'
          registry-url: 'https://registry.npmjs.org'
      - name: Install Yarn
        # Need to use bash to avoid having a windows/linux specific step
        shell: bash
        run: |
          YARN_VERSION=$(node -p "require('./OpenSearch-Dashboards/package.json').engines.yarn")
          echo "Installing yarn@$YARN_VERSION"
          npm i -g yarn@$YARN_VERSION
      - run: node -v
      - run: yarn -v
      - name: Bootstrap OpenSearch Dashboards with plugin
        run: |
          cd OpenSearch-Dashboards/plugins/alerting-dashboards-plugin
          yarn osd bootstrap
      - name: Run OpenSearch Dashboards server
        run: |
          cd OpenSearch-Dashboards
          yarn start --no-base-path --no-watch &
          sleep 450
#          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:5601/api/status)" != "200" ]]; do sleep 5; done'

      - name: Install Cypress
        run: |
          cd OpenSearch-Dashboards/plugins/alerting-dashboards-plugin
          # This will install Cypress in case the binary is missing which can happen on Windows and Mac
          # If the binary exists, this will exit quickly so it should not be an expensive operation
          npx cypress install
        shell: bash

      - name: Get Cypress version
        id: cypress_version
        run: |
          cd OpenSearch-Dashboards/plugins/alerting-dashboards-plugin
          echo "::set-output name=cypress_version::$(cat ./package.json | jq '.dependencies.cypress' | tr -d '"')"

      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: cypress-cache-v2-ubuntu-latest-${{ hashFiles('**/package.json') }}
          restore-keys: |
            cypress-cache-v2-ubuntu-latest-${{ hashFiles('**/package.json') }}

      - name: Run Cypress tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: OpenSearch-Dashboards/plugins/alerting-dashboards-plugin
          command: yarn run cypress run
          wait-on: 'http://localhost:5601'
          wait-on-timeout: 300
          browser: chrome
        env:
          CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

      # Screenshots are only captured on failure, will change this once we do visual regression tests
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: OpenSearch-Dashboards/plugins/alerting-dashboards-plugin/cypress/screenshots
      # Test run video was always captured, so this action uses "always()" condition
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: cypress-videos
          path: OpenSearch-Dashboards/plugins/alerting-dashboards-plugin/cypress/videos
